import pandas as pd
import numpy as np
from lifelines import CoxPHFitter
from sklearn.model_selection import KFold
from sklearn.feature_selection import SelectKBest, mutual_info_regression

# Load the dataset
df = pd.read_csv("D:/Virtual studio/MAI3004 test/all_PET.csv")

# Define the target variable and feature set
target_column = 'Relapse'
time_column = 'RFS'
X = df.drop(columns=['PatientID', target_column, time_column])  # Features
y = df[[time_column, target_column]]  # Target variables (time and event)

# Initialize 5-fold cross-validation
kf = KFold(n_splits=5, shuffle=True, random_state=42)

# Store results
best_c_index = -np.inf
best_features = None

# Step 1: Cross-validation for feature selection and evaluation
for train_index, val_index in kf.split(X):
    # Split into training and validation sets
    X_train, X_val = X.iloc[train_index], X.iloc[val_index]
    y_train, y_val = y.iloc[train_index], y.iloc[val_index]

    # Step 2: Feature selection using SelectKBest within the training fold
    pseudo_target = y_train[target_column]  # Use the event column as a target for mutual info
    selector = SelectKBest(score_func=mutual_info_regression, k=10)
    X_train_selected = selector.fit_transform(X_train, pseudo_target)

    # Get selected feature names
    selected_features = X_train.columns[selector.get_support()]
    X_val_selected = X_val[selected_features]

    # Combine selected features with target variables
    train_df = pd.concat([X_train[selected_features], y_train], axis=1)
    val_df = pd.concat([X_val[selected_features], y_val], axis=1)

    # Step 3: Fit the Cox proportional hazards model
    cph = CoxPHFitter()
    cph.fit(train_df, duration_col=time_column, event_col=target_column)

    # Step 4: Evaluate on the validation fold
    val_c_index = cph.score(val_df, scoring_method="concordance_index")

    # Track the best features and C-index
    if val_c_index > best_c_index:
        best_c_index = val_c_index
        best_features = selected_features

# Output the results
print("Best features selected using SelectKBest during cross-validation:", best_features)
print("Best C-index from cross-validation:", best_c_index)

# Save the dataset with selected features
selected_df = df[[target_column, time_column] + list(best_features)]
selected_df.to_csv('All_PET_Selected.csv', index=False)
